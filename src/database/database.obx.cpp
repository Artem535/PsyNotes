// Code generated by ObjectBox; DO NOT EDIT.

#include "database.obx.hpp"

const obx::Property<Note, OBXPropertyType_Long> Note_::id(1);
const obx::Property<Note, OBXPropertyType_Date> Note_::time(2);
const obx::RelationProperty<Note, NoteText> Note_::noteTextId(3);
const obx::Property<Note, OBXPropertyType_Long> Note_::emotGroupId(4);

void Note::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const Note& object) {
    fbb.Clear();
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<obx_id>(object.id));
    fbb.TrackField(6, fbb.PushElement<uint64_t>(object.time));
    fbb.TrackField(8, fbb.PushElement<obx_id>(object.noteTextId));
    fbb.TrackField(10, fbb.PushElement<uint64_t>(object.emotGroupId));
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

Note Note::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    Note object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<Note> Note::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<Note>(new Note());
    fromFlatBuffer(data, size, *object);
    return object;
}

void Note::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, Note& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    outObject.time = table->GetField<uint64_t>(6, 0);
    outObject.noteTextId = table->GetField<obx_id>(8, 0);
    outObject.emotGroupId = table->GetField<uint64_t>(10, 0);
    
}

const obx::Property<EmotGroup, OBXPropertyType_Long> EmotGroup_::id(1);
const obx::Property<EmotGroup, OBXPropertyType_Int> EmotGroup_::angryLevel(2);
const obx::Property<EmotGroup, OBXPropertyType_Int> EmotGroup_::sadLevel(3);
const obx::Property<EmotGroup, OBXPropertyType_Int> EmotGroup_::loveLevel(4);
const obx::Property<EmotGroup, OBXPropertyType_Int> EmotGroup_::fearLevel(5);
const obx::Property<EmotGroup, OBXPropertyType_Int> EmotGroup_::happyLevel(6);

void EmotGroup::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const EmotGroup& object) {
    fbb.Clear();
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<obx_id>(object.id));
    fbb.TrackField(6, fbb.PushElement<int32_t>(object.angryLevel));
    fbb.TrackField(8, fbb.PushElement<int32_t>(object.sadLevel));
    fbb.TrackField(10, fbb.PushElement<int32_t>(object.loveLevel));
    fbb.TrackField(12, fbb.PushElement<int32_t>(object.fearLevel));
    fbb.TrackField(14, fbb.PushElement<int32_t>(object.happyLevel));
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

EmotGroup EmotGroup::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    EmotGroup object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<EmotGroup> EmotGroup::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<EmotGroup>(new EmotGroup());
    fromFlatBuffer(data, size, *object);
    return object;
}

void EmotGroup::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, EmotGroup& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    outObject.angryLevel = table->GetField<int32_t>(6, 0);
    outObject.sadLevel = table->GetField<int32_t>(8, 0);
    outObject.loveLevel = table->GetField<int32_t>(10, 0);
    outObject.fearLevel = table->GetField<int32_t>(12, 0);
    outObject.happyLevel = table->GetField<int32_t>(14, 0);
    
}

const obx::Property<NoteText, OBXPropertyType_Long> NoteText_::id(1);
const obx::Property<NoteText, OBXPropertyType_String> NoteText_::thoughtsTxt(2);
const obx::Property<NoteText, OBXPropertyType_String> NoteText_::behaviorTxt(3);
const obx::Property<NoteText, OBXPropertyType_String> NoteText_::bodyTxt(4);
const obx::Property<NoteText, OBXPropertyType_String> NoteText_::feelsTxt(5);
const obx::Property<NoteText, OBXPropertyType_String> NoteText_::situationTxt(6);

void NoteText::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const NoteText& object) {
    fbb.Clear();
    auto offsetthoughtsTxt = fbb.CreateString(object.thoughtsTxt);
    auto offsetbehaviorTxt = fbb.CreateString(object.behaviorTxt);
    auto offsetbodyTxt = fbb.CreateString(object.bodyTxt);
    auto offsetfeelsTxt = fbb.CreateString(object.feelsTxt);
    auto offsetsituationTxt = fbb.CreateString(object.situationTxt);
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.TrackField(4, fbb.PushElement<obx_id>(object.id));
    fbb.AddOffset(6, offsetthoughtsTxt);
    fbb.AddOffset(8, offsetbehaviorTxt);
    fbb.AddOffset(10, offsetbodyTxt);
    fbb.AddOffset(12, offsetfeelsTxt);
    fbb.AddOffset(14, offsetsituationTxt);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

NoteText NoteText::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    NoteText object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<NoteText> NoteText::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<NoteText>(new NoteText());
    fromFlatBuffer(data, size, *object);
    return object;
}

void NoteText::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, NoteText& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(6);
        if (ptr) outObject.thoughtsTxt.assign(ptr->c_str());
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(8);
        if (ptr) outObject.behaviorTxt.assign(ptr->c_str());
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(10);
        if (ptr) outObject.bodyTxt.assign(ptr->c_str());
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(12);
        if (ptr) outObject.feelsTxt.assign(ptr->c_str());
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(14);
        if (ptr) outObject.situationTxt.assign(ptr->c_str());
    }
    
}

