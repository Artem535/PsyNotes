//THIS FILE IS AUTOGENERATED.
//It file was generated by $source_dir/database/convert_scripts.py
#pragma once
namespace constants {
namespace sql{
constexpr char createEmotTable[] = 
    "CREATE TABLE IF NOT EXISTS Emotions ( "
    "    id INTEGER PRIMARY KEY, "
    "    emotState INTEGER DEFAULT 0, "
    "    angryLevel INTEGER DEFAULT 0, "
    "    sadLevel INTEGER DEFAULT 0, "
    "    loveLevel INTEGER DEFAULT 0, "
    "    fearLevel INTEGER DEFAULT 0, "
    "    happyLevel INTEGER DEFAULT 0, "
    "     "
    "    UNIQUE (emotState, "
    "            angryLevel, "
    "            sadLevel, "
    "            loveLevel, "
    "            fearLevel, "
    "            happyLevel) "
    "); ";
constexpr char createNoteTable[] = 
    "CREATE TABLE IF NOT EXISTS Notes ( "
    "    id INTEGER PRIMARY KEY, "
    "    visible INTEGER DEFAULT 1, "
    "    title TEXT, "
    "    unixTime INTEGER DEFAULT (UNIXEPOCH('now')), "
    "    noteTextId INTEGER DEFAULT 0 NOT NULL, "
    "    emotId INTEGER DEFAULT 0 NOT NULL, "
    "     "
    "    FOREIGN KEY (noteTextId) REFERENCES NoteTextDetails (id), "
    "    FOREIGN KEY (emotId) REFERENCES Emotions (id) "
    "    "
    "    UNIQUE(noteTextId, emotId) "
    "); ";
constexpr char insertDefaultValueNote[] = 
    "INSERT OR IGNORE INTO Notes VALUES (0, 0, \"DEFAULT EMPTY NOTE\", 0, 0, 0); ";
constexpr char insertDefaultValueEmot[] = 
    "INSERT OR IGNORE INTO Emotions(id) VALUES (-1); ";
constexpr char insertDefaultValueNoteText[] = 
    "INSERT OR IGNORE INTO NoteTextDetails(id) VALUES (0); ";
constexpr char createNoteTextTable[] = 
    "CREATE TABLE IF NOT EXISTS NoteTextDetails ( "
    "    id INTEGER PRIMARY KEY, "
    "    thoughtsTxt TEXT DEFAULT \"\", "
    "    behaviorTxt TEXT DEFAULT \"\", "
    "    bodyTxt TEXT DEFAULT \"\", "
    "    situationTxt TEXT DEFAULT \"\", "
    "     "
    "    UNIQUE (thoughtsTxt, "
    "            behaviorTxt, "
    "            bodyTxt, "
    "            situationTxt) "
    "); ";
constexpr char getShortNotes[] = 
    "SELECT "
    "    nt.id as id, "
    "    nt.title as title, "
    "    nt.unixTime as unixTime, "
    "    STRFTIME(\"%H:%M\", nt.unixTime, \"unixepoch\", \"localtime\") as timeValue, "
    "    DATE(nt.unixTime, \"unixepoch\", \"localtime\") as dateValue  "
    "FROM "
    "    Notes AS nt "
    "WHERE "
    "    nt.visible == 1 ";
constexpr char getFullNoteOnId[] = 
    "SELECT "
    "    * "
    "FROM "
    "    (Notes n "
    "JOIN Emotions e ON "
    "    n.emotId == e.id) "
    "JOIN NoteTextDetails ntd ON "
    "    ntd.id  == n.noteTextId "
    "WHERE "
    "    n.id == :id ";
constexpr char insertNewNoteTemplate[] = 
    "INSERT OR FAIL INTO Notes ( "
    "    title, "
    "    noteTextId, "
    "    emotId "
    ") VALUES ( "
    "    \"title\", "
    "    :noteTextId, "
    "    :emotId "
    "); ";
constexpr char insertNewEmotTemplate[] = 
    "INSERT OR FAIL INTO Emotions ( "
    "    emotState, "
    "    angryLevel, "
    "    sadLevel, "
    "    loveLevel, "
    "    fearLevel, "
    "    happyLevel "
    ") VALUES ( "
    "    :emotState, "
    "    :angryLevel, "
    "    :sadLevel, "
    "    :loveLevel, "
    "    :fearLevel, "
    "    :happyLevel "
    "); "
    " ";
constexpr char insertNewTextTemplate[] = 
    "INSERT OR FAIL INTO NoteTextDetails ( "
    "    thoughtsTxt, "
    "    behaviorTxt, "
    "    bodyTxt, "
    "    situationTxt "
    ") VALUES ( "
    "    :thoughts, "
    "    :behavior, "
    "    :body, "
    "    :situation "
    "); "
    " ";
constexpr char replaceNote[] = 
    "INSERT OR REPLACE INTO Notes ( "
    "    id, "
    "    title, "
    "    noteTextId, "
    "    emotId "
    ") VALUES ( "
    "    :id, "
    "    \"title\", "
    "    :noteTextId, "
    "    :emotId "
    "); ";
}; // namespace sql
}; // namespace constants