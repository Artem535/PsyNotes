// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#ifdef __cplusplus
#include <cstdbool>
#include <cstdint>
extern "C" {
#else
#include <stdbool.h>
#include <stdint.h>
#endif
#include "objectbox.h"

/// Initializes an ObjectBox model for all entities. 
/// The returned pointer may be NULL if the allocation failed. If the returned model is not NULL, you should check if   
/// any error occurred by calling obx_model_error_code() and/or obx_model_error_message(). If an error occurred, you're
/// responsible for freeing the resources by calling obx_model_free().
/// In case there was no error when setting the model up (i.e. obx_model_error_code() returned 0), you may configure 
/// OBX_store_options with the model by calling obx_opt_model() and subsequently opening a store with obx_store_open().
/// As soon as you call obx_store_open(), the model pointer is consumed and MUST NOT be freed manually.
static inline OBX_model* create_obx_model() {
    OBX_model* model = obx_model();
    if (!model) return NULL;
    
    obx_model_entity(model, "Note", 1, 2563681303075705983);
    obx_model_property(model, "id", OBXPropertyType_Long, 1, 3916801052805254985);
    obx_model_property_flags(model, OBXPropertyFlags_ID);
    obx_model_property(model, "time", OBXPropertyType_Date, 2, 2941295353755163147);
    obx_model_property_flags(model, OBXPropertyFlags_UNSIGNED);
    obx_model_property(model, "noteTextId", OBXPropertyType_Relation, 3, 2190231541836872965);
    obx_model_property_flags(model, (OBXPropertyFlags) (OBXPropertyFlags_INDEXED | OBXPropertyFlags_INDEX_PARTIAL_SKIP_ZERO));
    obx_model_property_relation(model, "NoteText", 1, 9211145514956631291);
    obx_model_property(model, "emotGroupId", OBXPropertyType_Long, 4, 446327609880786134);
    obx_model_property_flags(model, OBXPropertyFlags_UNSIGNED);
    obx_model_property(model, "emotState", OBXPropertyType_Byte, 5, 8743432929941975893);
    obx_model_property(model, "title", OBXPropertyType_String, 6, 4903184536309275237);
    obx_model_entity_last_property_id(model, 6, 4903184536309275237);
    
    obx_model_entity(model, "EmotGroup", 2, 700435067374359821);
    obx_model_property(model, "id", OBXPropertyType_Long, 1, 5077849647987511724);
    obx_model_property_flags(model, OBXPropertyFlags_ID);
    obx_model_property(model, "angryLevel", OBXPropertyType_Byte, 2, 2440424875721631147);
    obx_model_property(model, "sadLevel", OBXPropertyType_Byte, 3, 1415228420976217454);
    obx_model_property(model, "loveLevel", OBXPropertyType_Byte, 4, 8870100008436453048);
    obx_model_property(model, "fearLevel", OBXPropertyType_Byte, 5, 3800835037971486481);
    obx_model_property(model, "happyLevel", OBXPropertyType_Byte, 6, 2641336810249675685);
    obx_model_entity_last_property_id(model, 6, 2641336810249675685);
    
    obx_model_entity(model, "NoteText", 3, 3849537838516242933);
    obx_model_property(model, "id", OBXPropertyType_Long, 1, 2712009128759176501);
    obx_model_property_flags(model, OBXPropertyFlags_ID);
    obx_model_property(model, "thoughtsTxt", OBXPropertyType_String, 2, 195551918347335913);
    obx_model_property(model, "behaviorTxt", OBXPropertyType_String, 3, 7435557165169443847);
    obx_model_property(model, "bodyTxt", OBXPropertyType_String, 4, 7506030314423471133);
    obx_model_property(model, "feelsTxt", OBXPropertyType_String, 5, 7765929673853561464);
    obx_model_property(model, "situationTxt", OBXPropertyType_String, 6, 7663006198187330067);
    obx_model_entity_last_property_id(model, 6, 7663006198187330067);
    
    obx_model_last_entity_id(model, 3, 3849537838516242933);
    obx_model_last_index_id(model, 1, 9211145514956631291);
    return model; // NOTE: the returned model will contain error information if an error occurred.
}

#ifdef __cplusplus
}
#endif
